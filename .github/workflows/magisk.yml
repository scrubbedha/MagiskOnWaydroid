name: Modify Waydroid
on:
  push:
    paths-ignore:
      - 'README.md'
  pull_request:
    paths-ignore:
      - 'README.md'
  workflow_dispatch:
    inputs:
      arch:
        description: "Build arch"
        required: true
        default: "arm64"
        type: choice
        options:
        - arm64
      magisk_apk:
        description: "Magisk version"
        required: true
        default: "canary"
        type: choice
        options:
        - 24.1
        - 24.2
        - 24.3
        - stable
        - beta
        - canary
        - delta
      root_sol:
        description: "Root solution"
        required: true
        default: "magisk"
        type: choice
        options:
        - magisk
        - none

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate build matrix
        id: set-matrix
        uses: actions/github-script@v6
        with:
          script: |
            let matrix = {};
            let arch = "${{ github.event.inputs.arch }}"
            switch ( arch ) {
              case "arm64":
                matrix.arch = ["arm64"];
                break;
              default:
                matrix.arch = ["arm64"];
                break;
            }
            let release_type = "${{ github.event.inputs.release_type }}"
            switch ( release_type ) {
              default:
                matrix.release_type = ["WIS"];
                break;
            }
            let magisk_apk = "${{ github.event.inputs.magisk_apk }}"
            switch ( magisk_apk ) {
              default:
                matrix.magisk_apk = ["delta"];
                break;
            }
            let root_sol = "${{ github.event.inputs.root_sol }}"
            switch ( root_sol ) {
              default:
                matrix.root_sol = ["magisk"];
                break;
            }
            core.setOutput("matrix",JSON.stringify(matrix));

  build:
    runs-on: ubuntu-20.04
    needs: matrix
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    steps:
      - name: Dependencies
        run: |
          pip3 install beautifulsoup4 lxml
          sudo apt-get update && sudo apt-get install setools lzip qemu-utils wine winetricks patchelf
          wget -qO- "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/archive/$GITHUB_REF.tar.gz" | sudo tar --wildcards -zxvf- -C ~ --strip-component=2 '*/wine/*' '*/linker/*'
          winetricks msxml6
      - name: Download WSA
        shell: python
        run: |
          import requests
          from bs4 import BeautifulSoup
          import re
          import zipfile
          import os
          import urllib.request

          arch = "${{ matrix.arch }}"

          #release_type_map = {"retail": "Retail", "release preview": "RP", "insider slow": "WIS", "insider fast": "WIF"}
          #release_type_map = "WIS"
          #release_type = release_type_map["${{ matrix.release_type }}"] if "${{ matrix.release_type }}" != "" else "Retail"
          release_type = "WIS"
          res = requests.post("https://store.rg-adguard.net/api/GetFiles", f"type=CategoryId&url=858014f3-3934-4abe-8078-4aa193e74ca8&ring={release_type}&lang=en-US", headers={
              "content-type": "application/x-www-form-urlencoded"
          }, verify=False) # source site has expired cert

          html = BeautifulSoup(res.content, "lxml")

          a = html.find("a", string=re.compile(f"Microsoft\.UI\.Xaml\..*_{arch}_.*\.appx"))
          link = a["href"]
          print(f"downloading link: {link}", flush=True)
          out_file = "xaml.appx"
          if not os.path.isfile(out_file):
              urllib.request.urlretrieve(link, out_file)

          a = html.find("a", string=re.compile(f"Microsoft\.VCLibs\..*_{arch}_.*\.appx"))
          link = a["href"]
          print(f"downloading link: {link}", flush=True)
          out_file = "vclibs.appx"
          if not os.path.isfile(out_file):
              urllib.request.urlretrieve(link, out_file)

          a = html.find("a", string=re.compile("MicrosoftCorporationII\.WindowsSubsystemForAndroid_.*\.msixbundle"))
          link = a["href"]
          print(f"downloading link: {link}", flush=True)
          out_file = "wsa.zip"
          if not os.path.isfile(out_file):
              urllib.request.urlretrieve(link, out_file)

          zip_name = ""
          with zipfile.ZipFile(out_file) as zip:
              for f in zip.filelist:
                  if arch in f.filename.lower():
                      zip_name = f.filename
                      if not os.path.isfile(zip_name):
                          print(f"unzipping to {zip_name}", flush=True)
                          zip.extract(f)
                          ver_no = zip_name.split("_")
                          ver = ver_no[1]
                          with open(os.environ['GITHUB_ENV'], 'a') as g:
                              g.write(f'WSA_VER={ver}\n')
                          rel = ver_no[3].split(".")
                          rell = str(rel[0])
                          with open(os.environ['GITHUB_ENV'], 'a') as g:
                              g.write(f'WSA_REL={rell}\n')
                  if 'language' in f.filename.lower() or 'scale' in f.filename.lower():
                      name = f.filename.split("-", 1)[1].split(".")[0]
                      zip.extract(f)
                      with zipfile.ZipFile(f.filename) as l:
                          for g in l.filelist:
                              if g.filename == 'resources.pri':
                                  g.filename = f'{name}.pri'
                                  l.extract(g, 'pri')
                                  print(f"extract resource pack {g.filename}")
                              elif g.filename == 'AppxManifest.xml':
                                  g.filename = f'{name}.xml'
                                  l.extract(g, 'xml')

          with zipfile.ZipFile(zip_name) as zip:
              if not os.path.isdir(arch):
                  print(f"unzipping from {zip_name}", flush=True)
                  zip.extractall(arch)

          print("done", flush=True)
      - name: Download Magisk
        shell: python
        run: |
          import urllib.request
          import zipfile
          import os
          import json
          import requests

          magisk_apk = """${{ github.event.inputs.magisk_apk }}"""

          if not magisk_apk:
              magisk_apk = "24.1"
          if magisk_apk == "24.1":
              magisk_apk = "https://github.com/topjohnwu/Magisk/releases/download/v24.1/Magisk-v24.1.apk"
          if magisk_apk == "24.2":
              magisk_apk = "https://github.com/topjohnwu/Magisk/releases/download/v24.2/Magisk-v24.2.apk"
          if magisk_apk == "24.3":
              magisk_apk = "https://github.com/topjohnwu/Magisk/releases/download/v24.3/Magisk-v24.3.apk"
          if magisk_apk == "delta":
              magisk_apk = "https://huskydg.github.io/download/magisk/25.2-delta-5.apk"
          if magisk_apk == "stable" or magisk_apk == "beta" or magisk_apk == "canary":
              magisk_apk = json.loads(requests.get(f"https://github.com/topjohnwu/magisk-files/raw/master/{magisk_apk}.json").content)['magisk']['link']


          out_file = "magisk.zip"

          arch = "${{ matrix.arch }}"

          abi_map={"x64" : ["x86_64", "x86"], "arm64" : ["arm64-v8a", "armeabi-v7a"]}

          if not os.path.isfile(out_file):
              urllib.request.urlretrieve(magisk_apk, out_file)

          def extract_as(zip, name, as_name, dir):
              info = zip.getinfo(name)
              info.filename = as_name
              zip.extract(info, dir)

          # changes to standalone_policy since v24.3
          # extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagiskinit.so", "magiskpolicy", "magisk")
          # extract_as(zip, f"lib/{ abi_map['x64'][0] }/libmagiskinit.so", "magiskpolicy", ".")

          with zipfile.ZipFile(out_file) as zip:
              extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagisk64.so", "magisk64", "magisk")
              extract_as(zip, f"lib/{ abi_map[arch][1] }/libmagisk32.so", "magisk32", "magisk")
              standalone_policy = False
              try:
                zip.getinfo(f"lib/{ abi_map[arch][0] }/libmagiskpolicy.so")
                standalone_policy = True
              except:
                pass
              extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagiskinit.so", "magiskinit", "magisk")
              if standalone_policy:
                extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagiskpolicy.so", "magiskpolicy", "magisk")
              else:
                extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagiskinit.so", "magiskpolicy", "magisk")
              extract_as(zip, f"lib/{ abi_map[arch][0] }/libmagiskboot.so", "magiskboot", "magisk")
              extract_as(zip, f"lib/{ abi_map[arch][0] }/libbusybox.so", "busybox", "magisk")
              if standalone_policy:
                extract_as(zip, f"lib/{ abi_map['x64'][0] }/libmagiskpolicy.so", "magiskpolicy", ".")
              else:
                extract_as(zip, f"lib/{ abi_map['x64'][0] }/libmagiskinit.so", "magiskpolicy", ".")
              extract_as(zip, f"assets/boot_patch.sh", "boot_patch.sh", "magisk")
              extract_as(zip, f"assets/util_functions.sh", "util_functions.sh", "magisk")
      - name: Replace system and vendor
        run: |
          wget -q https://sourceforge.net/projects/waydroid/files/images/system/lineage/waydroid_arm64/lineage-18.1-20221210-VANILLA-waydroid_arm64-system.zip/download -O system.img
          wget -q https://sourceforge.net/projects/waydroid/files/images/vendor/waydroid_arm64/lineage-18.1-20221210-MAINLINE-waydroid_arm64-vendor.zip/download -O vendor.zip
          7z x system.zip -o${{ matrix.arch }}/
          7z x vendor.zip -o${{ matrix.arch }}/
      - name: Resize system image
        run: |
          e2fsck -y -f ${{ matrix.arch }}/system.img
          resize2fs ${{ matrix.arch }}/system.img 6G
      - name: Expand vendor
        run: |
          e2fsck -yf ${{ matrix.arch }}/vendor.img
          resize2fs ${{ matrix.arch }}/vendor.img 512M
      - name: Mount images
        run: |
          sudo mkdir system
          sudo mkdir userdata
          sudo mount -o loop ${{ matrix.arch }}/system.img system
          sudo mount -o loop ${{ matrix.arch }}/vendor.img system/vendor
          sudo mv system/product system/product_ln
          sudo mkdir system/product
          sudo mount --bind $(pwd)/system/system/product $(pwd)/system/product
          ls system/product
          sudo mv system/system_ext system/system_ext_ln
          sudo mkdir system/system_ext
          sudo mount --bind $(pwd)/system/system/system_ext $(pwd)/system/system_ext
          ls system/system_ext
          qemu-img convert -O raw ${{ matrix.arch }}/userdata.vhdx userdata.img
          sudo mount -o loop userdata.img userdata
      - name: Integrate Magisk
        if: ${{ github.event.inputs.root_sol == 'magisk' || github.event.inputs.root_sol == '' }}
        run: |
          sudo mkdir system/sbin
          sudo chcon --reference system/init.environ.rc system/sbin
          sudo chown root:root system/sbin
          sudo chmod 0700 system/sbin
          sudo cp magisk/* system/sbin/
          sudo mkdir -p userdata/adb/magisk
          sudo chmod -R 700 userdata/adb
          sudo cp magisk/* userdata/adb/magisk/
          sudo find userdata/adb/magisk -type f -exec chmod 0755 {} \;
          sudo cp magisk.zip userdata/adb/magisk/magisk.apk
          sudo tee -a system/sbin/loadpolicy.sh <<EOF
          #!/system/bin/sh
          restorecon -R /data/adb/magisk
          for module in \$(ls /data/adb/modules); do
              if ! [ -f "/data/adb/modules/\$module/disable" ] && [ -f "/data/adb/modules/\$module/sepolicy.rule" ]; then
                  /sbin/magiskpolicy --live --apply "/data/adb/modules/\$module/sepolicy.rule"
              fi
          done
          EOF
          sudo find system/sbin -type f -exec chmod 0755 {} \;
          sudo find system/sbin -type f -exec chown root:root {} \;
          sudo find system/sbin -type f -exec chcon --reference system/product {} \;
          # new since v24.3
          sudo patchelf --replace-needed libc.so "${HOME}/libc.so" ./magiskpolicy || true
          sudo patchelf --replace-needed libm.so "${HOME}/libm.so" ./magiskpolicy || true
          sudo patchelf --replace-needed libdl.so "${HOME}/libdl.so" ./magiskpolicy || true
          sudo patchelf --set-interpreter "${HOME}/linker64" ./magiskpolicy || true
          # new since v24.3
          chmod +x ./magiskpolicy
          echo '/dev/magisk(/.*)?    u:object_r:magisk_file:s0' | sudo tee -a system/vendor/etc/selinux/vendor_file_contexts
          echo '/data/adb/magisk(/.*)?   u:object_r:magisk_file:s0' | sudo tee -a system/vendor/etc/selinux/vendor_file_contexts
          echo '/system/bin/strace u:object_r:zygote_socket:s0' | sudo tee -a system/vendor/etc/selinux/vendor_file_contexts
          sudo ./magiskpolicy --load system/vendor/etc/selinux/precompiled_sepolicy --save system/vendor/etc/selinux/precompiled_sepolicy --magisk "allow * magisk_file lnk_file *"
          sudo tee -a system/system/etc/init/hw/init.rc <<EOF
          on post-fs-data
              mkdir /dev/waydroid-magisk
              mount tmpfs tmpfs /dev/waydroid-magisk mode=0755
              copy /sbin/magisk64 /dev/waydroid-magisk/magisk64
              chmod 0755 /dev/waydroid-magisk/magisk64
              symlink ./magisk64 /dev/waydroid-magisk/magisk
              symlink ./magisk64 /dev/waydroid-magisk/su
              symlink ./magisk64 /dev/waydroid-magisk/resetprop
              copy /sbin/magisk32 /dev/waydroid-magisk/magisk32
              chmod 0755 /dev/waydroid-magisk/magisk32
              copy /sbin/magiskinit /dev/waydroid-magisk/magiskinit
              chmod 0755 /dev/waydroid-magisk/magiskinit
              symlink ./magiskinit /dev/waydroid-magisk/magiskpolicy
              mkdir /dev/waydroid-magisk/.magisk 700
              mkdir /dev/waydroid-magisk/.magisk/mirror 700
              mkdir /dev/waydroid-magisk/.magisk/mirror/data 700
              mkdir /dev/waydroid-magisk/.magisk/block 700
              mount none /data /dev/waydroid-magisk/.magisk/mirror/data bind rec
              start FAhW7H9G5sf
          service FAhW7H9G5sf /dev/waydroid-magisk/magisk --post-fs-data
              user root
              oneshot
          service HLiFsR1HtIXVN6 /dev/waydroid-magisk/magisk --service
              class late_start
              user root
              oneshot
          on property:sys.boot_completed=1
              start YqCTLTppv3ML
          service YqCTLTppv3ML /dev/waydroid-magisk/magisk --boot-complete
              user root
              oneshot
          EOF
      - name: Merge Language Resources
        run: |
          cp ${{ matrix.arch }}/resources.pri pri/en-us.pri
          cp ${{ matrix.arch }}/AppxManifest.xml xml/en-us.xml
          tee priconfig.xml <<EOF
          <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
          <resources targetOsVersion="10.0.0" majorVersion="1">
              <index root="\" startIndexAt="\">
                  <indexer-config type="folder" foldernameAsQualifier="true" filenameAsQualifier="true" qualifierDelimiter="."/>
                  <indexer-config type="PRI"/>
              </index>
          </resources>
          EOF
          wine64 ~/makepri.exe new /pr pri /in MicrosoftCorporationII.WindowsSubsystemForAndroid /cf priconfig.xml /of ${{ matrix.arch }}/resources.pri /o
          sed -i -zE "s/<Resources.*Resources>/<Resources>\n$(cat xml/* | grep -Po '<Resource [^>]*/>' | sed ':a;N;$!ba;s/\n/\\n/g' | sed 's/\$/\\$/g' | sed 's/\//\\\//g')\n<\/Resources>/g" ${{ matrix.arch }}/AppxManifest.xml
      - name: Umount images
        run: |
          sudo umount system/vendor
          sudo umount -l system/product
          sudo rm -rf system/product
          sudo mv system/product_ln system/product
          sudo umount -l system/system_ext
          sudo rm -rf system/system_ext
          sudo mv system/system_ext_ln system/system_ext
          sudo umount system
          sudo umount userdata
          qemu-img convert -o subformat=dynamic -f raw -O vhdx userdata.img ${{ matrix.arch }}/userdata.vhdx
      - name: Remove signature and add scripts
        run: |
          rm -rf ${{ matrix.arch }}/product.img
          rm -rf ${{ matrix.arch }}/system_ext.img
          rm -rf ${{ matrix.arch }}/userdata.img
          rm -rf WsaPackage_*_ARM64_Release-Nightly.msix
          rm -rf WsaPackage_*_language*.msix
          rm -rf ${{ matrix.arch }}/\[Content_Types\].xml ${{ matrix.arch }}/AppxBlockMap.xml ${{ matrix.arch }}/AppxSignature.p7x ${{ matrix.arch }}/AppxMetadata
          cp vclibs.appx xaml.appx ${{ matrix.arch }}
          tee ${{ matrix.arch }}/Install.ps1 <<EOF
          # Automated Install script by Mioki
          # http://github.com/okibcn
          function Test-Administrator {
              [OutputType([bool])]
              param()
              process {
                  [Security.Principal.WindowsPrincipal]\$user = [Security.Principal.WindowsIdentity]::GetCurrent();
                  return \$user.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator);
              }
          }

          function Finish {
              Clear-Host
              Start-Process "wsa://com.topjohnwu.magisk"
              Start-Process "wsa://com.android.vending"
          }

          if (-not (Test-Administrator)) {
              \$proc = Start-Process -PassThru -WindowStyle Hidden -Verb RunAs powershell.exe -Args "-executionpolicy bypass -command Set-Location '\$PSScriptRoot'; &'\$PSCommandPath' EVAL"
              \$proc.WaitForExit()
              if (\$proc.ExitCode -ne 0) {
                  Clear-Host
                  Write-Warning "Failed to launch start as Administrator\`r\`nPress any key to exit"
                  \$null = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
              }
              exit
          }
          elseif ((\$args.Count -eq 1) -and (\$args[0] -eq "EVAL")) {
              Start-Process powershell.exe -Args "-executionpolicy bypass -command Set-Location '\$PSScriptRoot'; &'\$PSCommandPath'"
              exit
          }

          if (((Test-Path -Path $(ls -Q ./${{ matrix.arch }} | paste -sd "," -)) -eq \$false).Count) {
              Write-Error "Some files are missing in the zip. Please try to download it again from the browser downloader, or try to run the workflow again. Press any key to exist"
              \$null = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
              exit 1
          }

          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"

          \$VMP = Get-WindowsOptionalFeature -Online -FeatureName 'VirtualMachinePlatform'
          if (\$VMP.State -ne "Enabled") {
              Enable-WindowsOptionalFeature -Online -NoRestart -FeatureName 'VirtualMachinePlatform'
              Clear-Host
              Write-Warning "Need restart to enable virtual machine platform\`r\`nPress y to restart or press any key to exit"
              \$key = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
              If ("y" -eq \$key.Character) {
                  Restart-Computer -Confirm
              }
              Else {
                  exit 1
              }
          }

          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Path vclibs.appx
          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Path xaml.appx

          \$Installed = \$null
          \$Installed = Get-AppxPackage -Name 'MicrosoftCorporationII.WindowsSubsystemForAndroid'

          If ((\$null -ne \$Installed) -and (-not (\$Installed.IsDevelopmentMode))) {
              Clear-Host
              Write-Warning "There is already one installed WSA. Please uninstall it first.\`r\`nPress y to uninstall existing WSA or press any key to exit"
              \$key = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
              If ("y" -eq \$key.Character) {
                  Remove-AppxPackage -Package \$Installed.PackageFullName
              }
              Else {
                  exit 1
              }
          }
          Clear-Host
          Write-Host "Installing MagiskOnWSA..."
          Stop-Process -Name "wsaclient" -ErrorAction "silentlycontinue"
          Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Register .\AppxManifest.xml
          if (\$?) {
              Finish
          }
          Elseif (\$null -ne \$Installed) {
              Clear-Host
              Write-Host "Failed to update, try to uninstall existing installation while preserving userdata..."
              Remove-AppxPackage -PreserveApplicationData -Package \$Installed.PackageFullName
              Add-AppxPackage -ForceApplicationShutdown -ForceUpdateFromAnyVersion -Register .\AppxManifest.xml
              if (\$?) {
                  Finish
              }
          }
          Write-Host "All Done\`r\`nPress any key to exit"
          \$null = \$Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')
          EOF
          shopt -s extglob
          sudo rm -rf -- ${{ matrix.arch }}/!(system.img|vendor.img)
      - name: Generate artifact name
        run: |
          variant="none"
          root="${{ github.event.inputs.root_sol }}"
          if [[ "$root" = "none" ]]; then
            name1=""
          elif [[ "$root" = "" ]]; then
            name1="-magisk"
          else
            name1="-${root}"
          fi
          if [[ "$variant" = "none" || "$variant" = "" ]]; then
            name2="-NoGApps"
          else
            name2="-${variant}"
          fi
          echo "artifact_name=WD${name1}${name2}_${{ matrix.arch }}" >> $GITHUB_ENV
      - name: Upload Waydroid
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact_name }}
          path: "./${{ matrix.arch }}/*"
